# -*- coding: utf-8 -*-
"""Copy of Copy of Untitled5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CAQEiuo1XltDtC0LEPvyiXdBoqp_nH1J
"""

import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.model_selection import cross_val_score
from sklearn.model_selection import KFold
from sklearn.pipeline import Pipeline
from tensorflow import keras

df = pd.read_csv('testdata.csv',encoding= 'unicode_escape')
df

df.head(200)
#df = df.drop(columns = ['Doping concentration(Na)'])
#print(type(df['Doping concentration(Na)'][0]))
#df
#print(df['Doping concentration(Na)'])
y = df.iloc[:,-1];
print(type(y))
df = df.drop(columns = ['S.No.','Vth(Threshold voltage)'])
df.shape
from sklearn.preprocessing import StandardScaler
object = StandardScaler()
df = object.fit_transform(df)
df = pd.DataFrame(df, columns = ['Oxide layer thickness(tox)','Doping concentration(Na)','Work function(øm)','W','L'])
type(df)
df

X = df.iloc[:, : ]
#y = df.iloc[:,-1]

X

y

from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error
X_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.8, random_state=7)
print('length of X_train and X_test: ', len(X_train), len(X_test))
print('length of y_train and y_test: ', len(y_train), len(y_test))
print(type(y_test))

import keras
from keras.models import Sequential
from keras.layers import Dense
model = Sequential()
model.add(Dense(1000,input_dim = 5,kernel_initializer='normal', activation='relu'))
model.add(Dense(100,input_dim = 5,activation='relu'))
model.add(Dense(1,activation = 'linear'))

model.compile(loss='mean_squared_error', optimizer='adam', metrics=['mean_squared_error'])

history = model.fit(X_train, y_train, epochs=150, batch_size=50)

print(history.history.keys())
# "Loss"
plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('model loss')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['train', 'validation'], loc='upper left')
plt.show()

y_pred = model.predict(X_test)

y_pred

print(type(y_pred))

test = y_test.to_numpy()

y_test

print(np.sqrt(mean_squared_error(y_test,y_pred)))

from sklearn.metrics import r2_score
r2_score(y_pred,y_test)

c = df.corr()

import seaborn as sns
sns.pairplot(c)

sns.heatmap(c)

y_test
plt.scatter(X_test['Oxide layer thickness(tox)'],y_pred	,color = 'green')
plt.scatter(X_test['Doping concentration(Na)'],y_pred,color = 'blue')
plt.scatter(X_test['Work function(øm)'],y_pred,color = 'red')

plt.scatter(X_train['Oxide layer thickness(tox)'],y_train	,color = 'green')
plt.scatter(X_train['Doping concentration(Na)'],y_train,color = 'blue')
plt.scatter(X_train['Work function(øm)'],y_train,color = 'red')

plt.scatter(X_test['Doping concentration(Na)'],y_test,color = 'blue')
#plt.scatter(X_train['Work function(øm)'],y_train,color = 'red'),y_train	,color = 'green')
plt.scatter(X_test['Doping concentration(Na)'],y_pred,color = 'red')
#plt.scatter(X_train['Work function(øm)'],y_train,color = 'red')